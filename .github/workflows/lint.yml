name: Buf
on:
  pull_request:
    types: [edited, labeled, opened, synchronize, reopened]
jobs:
  lint:
    name: Linter
    runs-on: ubuntu-20.04
    steps:
      - name: check out code
        uses: actions/checkout@v2
      - name: download and setup path for buf binary
        run: |
          mkdir -p buf/bin
          curl -L -o buf/bin/buf https://github.com/bufbuild/buf/releases/download/v0.42.1/buf-Linux-x86_64
          chmod +x buf/bin/buf
          echo "$GITHUB_WORKSPACE/buf/bin" >> $GITHUB_PATH
      - name: run buf build
        run: buf build
      - name: run buf lint
        run: buf lint
      # - name: run buf breaking
      #   run: buf breaking --against 'https://github.com/dictyBase/dictybaseapis.git#branch=master'
  generate:
    name: Generate Go code
    runs-on: ubuntu-20.04
    needs: lint
    steps:
      - name: check out code
        uses: actions/checkout@v2
      - name: set up golang
        uses: actions/setup-go@v2
        with:
            go-version: "^1.16.3"
      - name: download and setup path for buf binary
        run: |
          mkdir -p buf/bin
          curl -L -o buf/bin/buf https://github.com/bufbuild/buf/releases/download/v0.42.1/buf-Linux-x86_64
          chmod +x buf/bin/buf
          echo "$GITHUB_WORKSPACE/buf/bin" >> $GITHUB_PATH
      - name: download go binaries
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26.0
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1.0
          go install github.com/grpc-ecosystem/grpc-gateway/protoc-gen-grpc-gateway@v1.16.0
          go install github.com/mwitkow/go-proto-validators/protoc-gen-govalidators@v0.3.2
      - name: generate go code
        run: buf generate --path dictybase
      - name: clone go-genproto
        if: success()
        uses: actions/checkout@master
        with:
          repository: dictybase/go-genproto
          path: go-genproto
      - name: move generated files
        run: rsync -r proto/ go-genproto/dictybaseapis --remove-source-files && rm -rf proto
      - name: move into updated repo
        run: cd go-genproto
      - name: get short sha
        id: vars
        run: |
          sha=$(git rev-parse --short HEAD)
          echo ::set-output name=id::${sha}
      - name: create new branch in cloned repo
        run: git checkout -b chore/update-${{ steps.vars.outputs.id }}
      - name: extract user information 
        id: user_info
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
              const { data } = await github.users.getByUsername({
                username: context.payload.sender.login
              })
              core.setOutput("name", data.name)
              core.setOutput("email", data.email)
      - name: commit changes
        run: |
            git config --global user.email ${{ steps.user_info.outputs.email }}
            git config --global user.name ${{ steps.user_info.outputs.name }}
            git add .
            git commit -a -m "new update"
      - name: push changes
        run: git push origin chore/update-${{ steps.vars.outputs.id }}