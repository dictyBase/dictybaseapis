name: Buf
on:
  pull_request:
    types: [edited, labeled, opened, synchronize, reopened]
jobs:
  lint:
    name: Linter
    runs-on: ubuntu-20.04
    steps:
      - name: check out code
        uses: actions/checkout@v2
      - name: download and setup path for buf binary
        run: |
          mkdir -p buf/bin
          curl -L -o buf/bin/buf https://github.com/bufbuild/buf/releases/download/v0.42.1/buf-Linux-x86_64
          chmod +x buf/bin/buf
          echo "$GITHUB_WORKSPACE/buf/bin" >> $GITHUB_PATH
      - name: run buf build
        run: buf build
      - name: run buf lint
        run: buf lint
      # - name: run buf breaking
      #   run: buf breaking --against 'https://github.com/dictyBase/dictybaseapis.git#branch=master'
  generate:
    name: Generate Go code
    runs-on: ubuntu-20.04
    needs: lint
    steps:
      - name: check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.ACCESS_TOKEN }}
      - name: configure git
        run: |
            git config --global user.email "$GITHUB_ACTOR@users.noreply.github.com"
            git config --global user.name "$GITHUB_ACTOR"
      - name: set up golang
        uses: actions/setup-go@v2
        with:
            go-version: "^1.16.3"
      - name: download and setup path for buf binary
        run: |
          mkdir -p buf/bin
          curl -L -o buf/bin/buf https://github.com/bufbuild/buf/releases/download/v0.42.1/buf-Linux-x86_64
          chmod +x buf/bin/buf
          echo "$GITHUB_WORKSPACE/buf/bin" >> $GITHUB_PATH
      - name: download go binaries
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.26.0
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.1.0
          go install github.com/mwitkow/go-proto-validators/protoc-gen-govalidators@v0.3.2
      - name: generate go code
        run: buf generate --path dictybase
      - name: checkout target repo
        if: success()
        uses: actions/checkout@v2
        env:
          REPO: dictybase/go-genproto
          REPO_PATH: go-genproto
        with:
          fetch-depth: 0
          token: ${{ secrets.ACCESS_TOKEN }}
          repository: ${{ env.REPO }}
          path: ${{ env.REPO_PATH }}
      - name: move generated files
        run: cp -R proto/ go-genproto/dictybaseapis
      - name: move into updated repo
        run: cd ${{ env.REPO_PATH }}
      - name: get short sha
        id: vars
        run: |
          sha=$(git rev-parse --short HEAD)
          echo ::set-output name=id::${sha}
      - name: create new branch in cloned repo
        run: git checkout -b chore/update-${{ steps.vars.outputs.id }}
      - name: commit changes
        env:
          GIT_USERNAME: dictybasebot
          GIT_EMAIL: dictybasebot@users.noreply.github.com
        run: |
            git config --local user.name "${{ env.GIT_USERNAME }}"
            git config --local user.email "${{ env.GIT_EMAIL }}"
            git add go-genproto/
            git commit -m "update on `date +"%Y-%m-%d:%H:%M:%S"`"
      # - name: push changes
      #   run: git push https://github.com/dictyBase/go-genproto.git chore/update-${{ steps.vars.outputs.id }}