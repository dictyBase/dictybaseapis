syntax = "proto3";

package dictybase.publication;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option cc_enable_arenas = true;
option go_package = "github.com/dictyBase/go-genproto/dictybaseapis/publication;publication";
option java_multiple_files = true;
option java_outer_classname = "PublicationProto";
option java_package = "org.dictybase.publication";
option objc_class_prefix = "DICTYAPI";

// The publication service specification
service PublicationService {
  // Retrieves publication by ID
  rpc GetPublication(PublicationId) returns (Publication) {}
  // Create new publication
  rpc CreatePublication(NewPublication) returns (Publication) {}
  // Update an existing publication
  rpc UpdatePublication(PublicationUpdate) returns (Publication) {}
  // Delete an existing publication
  rpc DeletePublication(PublicationId) returns (google.protobuf.Empty) {}
  // List all publications
  rpc ListPublications(ListPublicationParameters) returns (PublicationCollection) {}
}

message PublicationId {
  // Unique identifier for the publication
  string id = 1 [(validator.field) = {string_not_empty: true}];
}

// Definition of an individual publication
message Publication {
  message Data {
    // Resource name, by default should be publication
    string type = 1;
    // Unique identifier for the publication
    string id = 2;
    PublicationAttributes attributes = 3;
  }
  Data data = 1 [(validator.field) = {msg_exists: true}];
}

// Definition of various publication attributes
message PublicationAttributes {
  // Digital object identifier for publication
  string doi = 1;
  // Title of publication
  string title = 2;
  // Abstract of publication
  string abstract = 3;
  // Journal where the publication was published
  string journal = 4;
  // Date publication was published
  google.protobuf.Timestamp pub_date = 5;
  // Volume of the publication
  string volume = 6;
  // Pages containing the publication
  string pages = 7;
  // International Standard Serial Number of publication
  string issn = 8;
  // Type of publication (i.e. "journal_article")
  string pub_type = 9;
  // Source of the publication (i.e. "pubmed")
  string source = 10;
  // Issue of the publication
  string issue = 11;
  // Status of the publication
  string status = 12;
  // List of authors of the publication
  repeated Author authors = 13;
}

// Definition for creating a new publication
message NewPublication {
  message Data {
    // Resource name, by default should be publication
    string type = 1;
    PublicationAttributes attributes = 2;
  }
  Data data = 1 [(validator.field) = {msg_exists: true}];
}

// Definition for updating an existing publication
message PublicationUpdate {
  message Data {
    // Resource name, by default should be publication
    string type = 1;
    // Unique identifier for the publication
    string id = 2 [(validator.field) = {string_not_empty: true}];
    PublicationUpdateAttributes attributes = 3;
  }
  Data data = 1 [(validator.field) = {msg_exists: true}];
}

// Defines attributes for updating an existing publication
message PublicationUpdateAttributes {
  // Date of publication
  google.protobuf.Timestamp pub_date = 1;
  // Volume of the publication
  string volume = 2;
  // Pages containing the publication
  string pages = 3;
  // Type of publication (i.e. "journal_article")
  string pub_type = 4;
  // Source of the publication (i.e. "pubmed")
  string source = 5;
  // Status of the publication
  string status = 6;
  // List of authors of the publication
  repeated Author authors = 7;
}

// List of publications
message PublicationCollection {
  message Data {
    // Resource name, by default should be publication
    string type = 1;
    // Unique identifier for the publication
    string id = 2;
    PublicationAttributes attributes = 3;
  }
  repeated Data data = 1 [(validator.field) = {repeated_count_min: 1}];
  Meta meta = 3 [(validator.field) = {msg_exists: true}];
}

// Defines fields for manipulating output of Publication collection
message ListPublicationParameters {
  // A unique pointer to the next set of result in the list
  int64 cursor = 1;
  // Maximum number of records that can be fetch per request
  int64 limit = 2;
  // The `filter` field restricts the data return by the collection. To use
  // it, supply one or multiple allowed fields to filter followed
  // by a filter expression. It uses the following syntax...
  //        field_name operator expression
  //
  // The following fields of `PublicationAttributes` definition are allowed to
  // be used for filtering
  //   * journal            - Journal where the publication was published (string)
  //   * year               - Year publication was published (string)
  //   * pub_date           - Date of publication (string)
  //   * pub_type           - Type of publication (string)
  //   * source             - Source of the publication (string)
  //   * issue              - Issue of the publication (string)
  //   * status             - Status of the publication (string)
  //   * author             - Authors of the publication (string)
  //
  // field_name - Any one of the allowed field_name of the `PublicationAttributes` definition.
  // operator - Defines the type of filter match to use. It could be any of
  // the following four and all of them should be URL-encoded for http request.
  //
  //        Operators for strings
  //              =~   Contains substring
  //              !~   Not contains substring
  //              ===  Equals
  //              !==  Not equals
  //
  //        Operators for number
  //              ==  Equals
  //              >   Greater than
  //              <   Less than
  //              =<  Less than equal to
  //              >=  Greater than equal to
  //
  // expression - The value that will be included or excluded from the
  // result. URL-reserved characters must be URL-encoded for http request.
  //
  //           filter: "pub_type===journal_article"
  //           filter: "source===pubmed"
  //
  // Filter can be combined using OR or AND boolean logic.
  //   * The OR is represented using a comma(,).
  //   * The AND is represented using a semi-colon(;).
  //   * AND and OR operators can be combined and AND takes precedence over OR.
  //
  //           filter: "year==2008;journal===Genesis"
  //
  // Can also accept multiple authors.
  //           filter: "author===Vandelay;author===VanNostrand"
  //
  string filter = 3;
  // The sort field allow to sort the data return by the collection based on
  // fields of `PublicationAttributes. To use it, supply a comma separated one
  // or more allowed field from the definition of `PublicationAttributes`.
}

// Definition of an individual author
message Author {
  // Last name of the author
  string last_name = 1;
  // First name of the author
  string first_name = 2;
  // Any initials of the author
  string initials = 3;
  // Ranking of the author
  int64 rank = 4;
}

// Metadata definition for traversing the collection
message Meta {
  // A unique pointer to the next set of result in the collection. Set the
  // cursor value parameter to the value of next_cursor to retrieve the next
  // set of collection using the same method
  int64 next_cursor = 1;
  // Maximum number of records that can be fetch per request
  int64 limit = 2;
  // Total number of records in the collection.
  int64 total = 3;
}
