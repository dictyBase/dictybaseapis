syntax = "proto3";

package dictybase.feature_annotation;

import "buf/validate/validate.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option cc_enable_arenas = true;
option go_package = "github.com/dictyBase/go-genproto/dictybaseapis/feature_annotation;feature_annotation";
option java_multiple_files = true;
option java_outer_classname = "FeatureAnnotationProto";
option java_package = "org.dictybase.feature";
option objc_class_prefix = "DICTYAPI";

// The feature annotation service specification
service FeatureAnnotationService {
  // Create a feature annotation
  rpc CreateFeatureAnnotation(NewFeatureAnnotation) returns (FeatureAnnotation) {}
  // Retrieves the specified feature annotation
  rpc GetFeatureAnnotation(FeatureAnnotationId) returns (FeatureAnnotation) {}
  // Update an existing feature annotation
  rpc UpdateFeatureAnnotation(FeatureAnnotationUpdate) returns (FeatureAnnotation) {}
  // Delete an existing feature annotation
  rpc DeleteFeatureAnnotation(DeleteFeatureAnnotationRequest) returns (google.protobuf.Empty) {}
}

message FeatureAnnotation {
  string type = 1;
  // unique identifier for the feature annotation
  string id = 2;
  FeatureAnnotationAttributes attributes = 3;
  // email id of the user who created the content
  string created_by = 4 [(buf.validate.field).cel = {
    id: "valid_email"
    message: "email must be a valid email"
    expression: "this.isEmail()"
  }];
  // email id of the user who updated the content
  string updated_by = 5 [
    (buf.validate.field).ignore_empty = true,
    (buf.validate.field).cel = {
      id: "valid_email"
      message: "email must be a valid email"
      expression: "this.isEmail()"
    }
  ];
  // Timestamp for creation and update
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
  // Toggle the obsolete status
  bool is_obsolete = 8;
  int64 version = 9 [deprecated = true];
}

// Common attributes for feature annotations
message FeatureAnnotationAttributes {
  // Short human readable textual name
  string name = 1 [(buf.validate.field).required = true];
  // Alternate list of names
  repeated string synonyms = 2;
  // List of publications(doi identifiers)
  repeated string publications = 3;
  // List of pubmed id
  repeated string pubmed = 4;
  repeated Dbxref dbxrefs = 5 [deprecated = true];
  // Cross references to other databases
  repeated DbLink dblinks = 6;
  // Bucket of key value pair data
  repeated TagProperty properties = 7;
}

message FeatureAnnotationUpdate {
  string type = 1;
  string id = 2 [(buf.validate.field).required = true];
  FeatureAnnotationAttributes attributes = 3;
  // email id of the user who updated the content
  string updated_by = 4 [(buf.validate.field).cel = {
    id: "valid_email"
    message: "email must be a valid email"
    expression: "this.isEmail()"
  }];
  // Toggle the obsolete status
  bool is_obsolete = 5;
}

message NewFeatureAnnotation {
  string type = 1;
  FeatureAnnotationAttributes attributes = 2 [(buf.validate.field).required = true];
  // email id of the user who created the content
  string created_by = 3 [(buf.validate.field).cel = {
    id: "valid_email"
    message: "email must be a valid email"
    expression: "this.isEmail()"
  }];
  // Timestamp for creation and update
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  // Toggle the obsolete status
  bool is_obsolete = 6;
  int64 version = 7 [deprecated = true];
  // unique identifier for the feature annotation
  string id = 8 [(buf.validate.field).required = true];
}

message FeatureAnnotationId {
  // unique identifier for the feature annotation
  string id = 1 [(buf.validate.field).required = true];
}

message DeleteFeatureAnnotationRequest {
  // unique identifier for the feature annotation
  string id = 1 [(buf.validate.field).required = true];
  // flag to indicate whether the entry will be wiped or turned obsolete(soft delete)
  bool purge = 2;
}

// Link to an identifier typically from a bioinformatics
// database(NCBI,Uniprot,Ensembl etc.)
message DbLink {
  // Identifier of the linked database
  string primary_id = 1 [(buf.validate.field).required = true];
  // a number which differentiates between versions of
  // the same object. Higher numbers are considered to be
  // later and more relevant
  int64 version = 2;
  // Source database
  string database = 3 [(buf.validate.field).required = true];
  // Type of this dblink, for example 'protein'
  string linktype = 4;
  // URL that is associated with this link
  string url = 5 [(buf.validate.field).string.uri = true];
  // A short name that is a possible alternative to the database name which
  // could be used for display.
  string label = 6;
}

// TagProperty represents a key-value pair structure used for storing
// custom attributes or metadata.
message TagProperty {
  string tag = 1 [(buf.validate.field).required = true];
  string value = 2 [(buf.validate.field).required = true];
}

// deprecated
message Dbxref {
  // Identifier
  string dbxref_id = 1 [(buf.validate.field).required = true];
  int64 version = 2;
  // Source database
  string database = 3 [(buf.validate.field).required = true];
}
