syntax = "proto3";

package dictybase.feature_annotation;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option cc_enable_arenas = true;
option go_package = "github.com/dictyBase/go-genproto/dictybaseapis/feature_annotation;feature_annotation";
option java_multiple_files = true;
option java_outer_classname = "FeatureAnnotationProto";
option java_package = "org.dictybase.feature";
option objc_class_prefix = "DICTYAPI";

// The feature annotation service specification 
service FeatureAnnotationService {
  // Create a feature annotation
  rpc CreateFeatureAnnotation(NewFeatureAnnotation) returns (FeatureAnnotation) {}
  // Retrieves the specified feature annotation
  rpc GetFeatureAnnotation(FeatureAnnotationId) returns (FeatureAnnotation) {}
  // Update an existing feature annotation
  rpc UpdateFeatureAnnotation(FeatureAnnotationUpdate) returns (FeatureAnnotation) {}
  // Delete an existing feature annotation
  rpc DeleteFeatureAnnotation(DeleteFeatureAnnotationRequest) returns (google.protobuf.Empty) {}
}

message FeatureAnnotation {
  string type = 1;
  string id = 2;
  FeatureAnnotationAttributes attributes = 3;
  // email id of the user who created the content
  string created_by = 4;
  // email id of the user who updated the content
  string updated_by = 5;
  // Timestamp for creation and update
  google.protobuf.Timestamp created_at = 6 [(validator.field) = {msg_exists: true}];
  google.protobuf.Timestamp updated_at = 7 [(validator.field) = {msg_exists: true}];
  // Toggle the obsolete status
  bool is_obsolete = 8;
  // Version of this feature
  int64 version = 9;
}

// Common attributes for feature annotations
message FeatureAnnotationAttributes {
  // Short human readable textual name
  string name = 1;
  // Alternate list of names
  repeated string synonyms = 2;
  // List of publications(doi identifiers)
  repeated string publications = 3;
  // List of pubmed id
  repeated string pubmed = 4;
  // Cross references to other databases
  repeated Dbxref dbxrefs = 5;
}

message FeatureAnnotationUpdate {
  string type = 1;
  string id = 2;
  FeatureAnnotationAttributes attributes = 3;
  // email id of the user who updated the content
  string updated_by = 4;
  // Toggle the obsolete status
  bool is_obsolete = 5;
}

message NewFeatureAnnotation {
  string type = 1;
  FeatureAnnotationAttributes attributes = 2;
  // email id of the user who created the content
  string created_by = 3;
  // email id of the user who updated the content
  string updated_by = 4;
  // Timestamp for creation and update
  google.protobuf.Timestamp created_at = 5 [(validator.field) = {msg_exists: true}];
  google.protobuf.Timestamp updated_at = 6 [(validator.field) = {msg_exists: true}];
  // Toggle the obsolete status
  bool is_obsolete = 7;
  // Version of this feature
  int64 version = 8;
}

message FeatureAnnotationId {
  // unique identifier for the feature annotation
  string id = 1 [(validator.field) = {string_not_empty: true}];
}

message DeleteFeatureAnnotationRequest {
  // unique identifier for the feature annotation
  string id = 1 [(validator.field) = {string_not_empty: true}];
  // flag to indicate whether the entry will be wiped or turned obsolete(soft delete)
  bool purge = 2;
}

// An identifier typically from a bioinformatics database(NCBI,Uniprot,Ensembl etc.)
message Dbxref {
  // Identifier
  string dbxref_id = 1 [(validator.field) = {string_not_empty: true}];
  int64 version = 2;
  // Source database
  string database = 3 [(validator.field) = {string_not_empty: true}];
}
