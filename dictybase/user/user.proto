syntax = "proto3";

package dictybase.user;
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";
import "dictybase/api/jsonapi/payload.proto";
import "dictybase/api/jsonapi/request.proto";


option cc_enable_arenas = true;
option go_package = "github.com/dictyBase/go-genproto/dictybaseapis/user;user";
option java_multiple_files = true;
option java_outer_classname = "UserProto";
option java_package = "org.dictybase.user";
option objc_class_prefix = "DICTYAPI";

// The user service definition
service UserService {
    // Gets the specified user
    rpc GetUser (dictybase.api.jsonapi.GetRequest) returns (User) {
        // Resource id is mapped to the URL.
        option (google.api.http).get = "/users/{id}";
    }
    // List all users
    rpc ListUsers (dictybase.api.jsonapi.ListRequest) returns (UserCollection) {
        option (google.api.http).get = "/users";
    }

    // Create an user
    rpc CreateUser(CreateUserRequest) returns (User) {
        // Resource is contained in the HTTP request body.
        option (google.api.http) = {
            post: "/users"
            body: "*"
        };
    }

    // Update an user
    rpc UpdateUser(UpdateUserRequest) returns (User) {
        // Resource is contained in the HTTP request body.
        option (google.api.http) = {
            patch: "/users"
            body: "*"
        };
    }

    // Delete an user
    rpc DeleteUser(dictybase.api.jsonapi.DeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/users/{id}"
        };
    }
}

message UpdateUserRequest {
    message Data {
        string type = 1;
        // Unique id, required
        int64 id = 2;
        UserAttributes attributes = 3;
        ExistingUserRelationships relationships = 4;
    }
    Data data = 1;
    // An optional mask specifying which fields to update.
    // Presence of this field allow partial updates.
    google.protobuf.FieldMask update_mask = 2;
}

message CreateUserRequest {
    // The payload for new user
    message Data {
        string type = 1;
        UserAttributes attributes = 2;
        NewUserRelationships relationships = 3;
    }
    Data data = 1;
}

// A user resource.
message User {
    UserData data = 1;
    dictybase.api.jsonapi.Links links = 2;
}

// A user collection resource.
message UserCollection {
    repeated UserData data = 1;
    dictybase.api.jsonapi.PaginationLinks links = 2;
    dictybase.api.jsonapi.Meta meta = 3;
}

// A top level container for user data.
message UserData {
    // The resource name.
    string type = 1;
    // Unique id.
    int64 id = 2;
    UserAttributes attributes = 3;
    dictybase.api.jsonapi.Links links = 4;
    ExistingUserRelationships relationships = 5;
}

// A container for user fields.
message UserAttributes {
    // First name.
    string first_name = 1;
    // Last name.
    string last_name = 2;
    // Email.
    string email = 3;
    // Organization in which the user belong.
    string organization = 4;
    // Group in which the user belong.
    string group = 5;
    // Address.
    string first_address = 6;
    // More address.
    string second_address = 7;
    // City.
    string city = 8;
    // State.
    string state = 9;
    // Zipcode.
    string zip = 10;
    // Country.
    string country = 11;
    // Phone no.
    string phone = 12;
    // Current status of user.
    bool is_active = 13;
}

// The relationship definition for existing users.
message ExistingUserRelationships {
    // Relationships with role resource.
    message Roles {
        // Http links with role resource.
        dictybase.api.jsonapi.Links links = 1;
    }
    Roles roles = 1;
}


// The relationship definition for creating new users.
message NewUserRelationships {
    // Relationships with role resource.
    message Roles {
        // A role [resource identifier object](http://jsonapi.org/format/#document-resource-identifier-objects).
        dictybase.api.jsonapi.Data data = 1;
    }
    repeated Roles roles = 1;
}


