syntax = "proto3";

package dictybase.user;
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
import "dictybase/api/jsonapi/payload.proto";
import "dictybase/api/jsonapi/request.proto";


option cc_enable_arenas = true;
option go_package = "github.com/dictyBase/go-genproto/dictybaseapis/user;user";
option java_multiple_files = true;
option java_outer_classname = "UserProto";
option java_package = "org.dictybase.user";
option objc_class_prefix = "DICTYAPI";

// The user service definition
service UserService {
    // Gets the specified user
    rpc GetUser (dictybase.api.jsonapi.GetRequest) returns (User) {
        // Resource id is mapped to the URL.
        option (google.api.http).get = "/users/{id}";
    }

    // Gets all related roles
    rpc GetRelatedRoles (dictybase.api.jsonapi.RelationshipRequest) returns (RoleCollection) {
        option (google.api.http).get = "/users/{id}/roles";
    }

    // List all users
    rpc ListUsers (dictybase.api.jsonapi.ListRequest) returns (UserCollection) {
        option (google.api.http).get = "/users";
    }

    // Create an user
    rpc CreateUser(CreateUserRequest) returns (User) {
        // Resource is contained in the HTTP request body.
        option (google.api.http) = {
            post: "/users"
            body: "*"
        };
    }

    // Create relationship links with roles
    rpc CreateRoleRelationship(dictybase.api.jsonapi.DataCollection) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/users/{id}/relationships/roles"
            body: "*"
        };
    }

    // Update an user
    rpc UpdateUser(UpdateUserRequest) returns (User) {
        // Resource is contained in the HTTP request body.
        option (google.api.http) = {
            patch: "/users"
            body: "*"
        };
    }

    // Update relationship links with roles
    rpc UpdateRoleRelationship(dictybase.api.jsonapi.DataCollection) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/users/{id}/relationships/roles"
            body: "*"
        };
    }

    // Delete an user
    rpc DeleteUser(dictybase.api.jsonapi.DeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/users/{id}"
        };
    }


    // Delete relationship links with roles
    rpc DeleteRoleRelationship(dictybase.api.jsonapi.DataCollection) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/users/{id}/relationships/roles"
            body: "*"
        };
    }
}

message UpdateUserRequest {
    message Data {
        string type = 1;
        // Unique id, required
        int64 id = 2;
        UserAttributes attributes = 3;
        NewUserRelationships relationships = 4;
    }
    Data data = 1;
    // An optional mask specifying which fields to update.
    // Presence of this field allow partial updates.
    google.protobuf.FieldMask update_mask = 2;
}

message CreateUserRequest {
    // The payload for new user
    message Data {
        string type = 1;
        UserAttributes attributes = 2;
        NewUserRelationships relationships = 3;
    }
    Data data = 1;
}

// A user resource.
message User {
    UserData data = 1;
    repeated google.protobuf.Any included = 3;
}

// A user collection resource.
message UserCollection {
    repeated UserData data = 1;
    dictybase.api.jsonapi.PaginationLinks links = 2;
    dictybase.api.jsonapi.Meta meta = 3;
    repeated google.protobuf.Any included = 4;
}

// A top level container for user data.
message UserData {
    // The resource name.
    string type = 1;
    // Unique id.
    int64 id = 2;
    UserAttributes attributes = 3;
    dictybase.api.jsonapi.Links links = 4;
    ExistingUserRelationships relationships = 5;
}

// A container for user fields.
message UserAttributes {
    // First name.
    string first_name = 1;
    // Last name.
    string last_name = 2;
    // Email.
    string email = 3;
    // Organization in which the user belong.
    string organization = 4;
    // Group in which the user belong.
    string group_name = 5;
    // Address.
    string first_address = 6;
    // More address.
    string second_address = 7;
    // City.
    string city = 8;
    // State.
    string state = 9;
    // Zipcode.
    string zipcode = 10;
    // Country.
    string country = 11;
    // Phone no.
    string phone = 12;
    // Current status of user.
    bool is_active = 13;
    // Timestamp for creation and update 
    google.protobuf.Timestamp created_at = 14;
    google.protobuf.Timestamp updated_at = 15;
}

// The relationship definition for existing users.
message ExistingUserRelationships {
    // Relationships with role resource.
    message Roles {
        // Http links with role resource.
        dictybase.api.jsonapi.Links links = 1;
        // A role [resource identifier object](http://jsonapi.org/format/#document-resource-identifier-objects).
        repeated dictybase.api.jsonapi.Data data = 2;
    }
    Roles roles = 1;
}


// The relationship definition for creating new users.
message NewUserRelationships {
    // Relationships with role resource.
    message Roles {
        // A role [resource identifier object](http://jsonapi.org/format/#document-resource-identifier-objects).
        repeated dictybase.api.jsonapi.Data data = 1;
    }
    Roles roles = 1;
}


// The role service definition
service RoleService {
    // Gets the specified role
    rpc GetRole (dictybase.api.jsonapi.GetRequest) returns (Role) {
        // Resource id is mapped to the URL.
        option (google.api.http).get = "/roles/{id}";
    }

    // Gets all related users
    rpc GetRelatedUsers (dictybase.api.jsonapi.RelationshipRequest) returns (UserCollection) {
        option (google.api.http).get = "/roles/{id}/users";
    }

    // Gets all related permissions
    rpc GetRelatedPermissions  (dictybase.api.jsonapi.RelationshipRequest) returns (PermissionCollection) {
        option (google.api.http).get = "/roles/{id}/permissions";
    }

    // List all roles
    rpc ListRoles (dictybase.api.jsonapi.SimpleListRequest) returns (RoleCollection) {
        option (google.api.http).get = "/roles";
    }

    // Create an role
    rpc CreateRole(CreateRoleRequest) returns (Role) {
        // Resource is contained in the HTTP request body.
        option (google.api.http) = {
            post: "/roles"
            body: "*"
        };
    }

    rpc CreateUserRelationship(dictybase.api.jsonapi.DataCollection) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/roles/{id}/relationships/users"
            body: "*"
        };
    }


    rpc CreatePermissionRelationship(dictybase.api.jsonapi.DataCollection) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/roles/{id}/permissions/permissions"
            body: "*"
        };
    }


    // Update an role
    rpc UpdateRole(UpdateRoleRequest) returns (Role) {
        // Resource is contained in the HTTP request body.
        option (google.api.http) = {
            patch: "/roles"
            body: "*"
        };
    }


    rpc UpdateUserRelationship(dictybase.api.jsonapi.DataCollection) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/roles/{id}/relationships/users"
            body: "*"
        };
    }

    rpc UpdatePermissionRelationship(dictybase.api.jsonapi.DataCollection) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/roles/{id}/relationships/permissions"
            body: "*"
        };
    }

    // Delete an role
    rpc DeleteRole(dictybase.api.jsonapi.DeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/roles/{id}"
        };
    }

    rpc DeleteUserRelationship(dictybase.api.jsonapi.DataCollection) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/roles/{id}/relationships/users"
            body: "*"
        };
    }

    rpc DeletePermissionRelationship(dictybase.api.jsonapi.DataCollection) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/roles/{id}/relationships/permissions"
            body: "*"
        };
    }
}


message UpdateRoleRequest {
    message Data {
        string type = 1;
        // Unique id, required
        int64 id = 2;
        RoleAttributes attributes = 3;
        ExistingRoleRelationships relationships = 4;
    }
    Data data = 1;
    // An optional mask specifying which fields to update.
    // Presence of this field allow partial updates.
    google.protobuf.FieldMask update_mask = 2;
}

message CreateRoleRequest {
    // The payload for new role
    message Data {
        string type = 1;
        RoleAttributes attributes = 2;
        NewRoleRelationships relationships = 3;
    }
    Data data = 1;
}

// A definition for managing user roles.
message Role {
    RoleData data = 1;
    repeated google.protobuf.Any included = 3;
}

// A role collection definition.
message RoleCollection {
    repeated RoleData data = 1;
    dictybase.api.jsonapi.Links links = 2;
    repeated google.protobuf.Any included = 3;
}

// A top level container for role data.
message RoleData {
    string type = 1;
    int64 id = 2;
    RoleAttributes attributes = 3;
    dictybase.api.jsonapi.Links links = 4;
    ExistingRoleRelationships relationships = 5;
}

// A container for role fields.
message RoleAttributes {
    string role = 1;
    string description = 2;
    // Timestamp for creation and update 
    google.protobuf.Timestamp created_at = 14;
    google.protobuf.Timestamp updated_at = 15;
}


// The relationship definition for existing roles.
message ExistingRoleRelationships {
    // Relationships with permission definition.
    message Permissions {
        dictybase.api.jsonapi.Links links = 1;
        repeated dictybase.api.jsonapi.Data data = 2;
    }
    // Relationships with user definition.
    message Users {
        dictybase.api.jsonapi.Links links = 1;
        repeated dictybase.api.jsonapi.Data data = 2;
    }
    Permissions permissions = 1;
    Users users = 2;
}

// The relationship definition for creating new roles.
message NewRoleRelationships {
    message Permissions {
        repeated dictybase.api.jsonapi.Data data = 1;
    }
    message Users {
        repeated dictybase.api.jsonapi.Data data = 1;
    }
    Permissions permissions = 1;
    Users users = 2;
}


// The permission service definition
service PermissionService {
    // Gets the specified permission
    rpc GetPermission (dictybase.api.jsonapi.GetRequest) returns (Permission) {
        // Resource id is mapped to the URL.
        option (google.api.http).get = "/permissions/{id}";
    }
    // List all permissions
    rpc ListPermissions (dictybase.api.jsonapi.SimpleListRequest) returns (PermissionCollection) {
        option (google.api.http).get = "/permissions";
    }

    // Create an permission
    rpc CreatePermission(CreatePermissionRequest) returns (Permission) {
        // Resource is contained in the HTTP request body.
        option (google.api.http) = {
            post: "/permissions"
            body: "*"
        };
    }

    // Update an permission
    rpc UpdatePermission(UpdatePermissionRequest) returns (Permission) {
        // Resource is contained in the HTTP request body.
        option (google.api.http) = {
            patch: "/permissions"
            body: "*"
        };
    }

    // Delete an permission
    rpc DeletePermission(dictybase.api.jsonapi.DeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/permissions/{id}"
        };
    }
}


message UpdatePermissionRequest {
    message Data {
        string type = 1;
        // Unique id, required
        int64 id = 2;
        PermissionAttributes attributes = 3;
    }
    Data data = 1;
    // An optional mask specifying which fields to update.
    // Presence of this field allow partial updates.
    google.protobuf.FieldMask update_mask = 2;
}

message CreatePermissionRequest {
    // The payload for new user
    message Data {
        string type = 1;
        PermissionAttributes attributes = 2;
    }
    Data data = 1;
}

// A resource for managing user permission.
message Permission {
    PermissionData data = 1;
}

// A permission collection resource.
message PermissionCollection {
    repeated PermissionData data = 1;
    dictybase.api.jsonapi.Links links = 2;
}


// A top level container for permission data.
message PermissionData {
    // The resource name.
    string type = 1;
    // Unique id.
    int64 id = 2;
    PermissionAttributes attributes = 3;
    dictybase.api.jsonapi.Links links = 4;
}

// A container for permission fields.
message PermissionAttributes {
    // Kind of permission.
    string permission = 1;
    // Brief description of the type of permission.
    string description = 2;
    // Timestamp for creation and update 
    google.protobuf.Timestamp created_at = 3;
    google.protobuf.Timestamp updated_at = 4;
}
