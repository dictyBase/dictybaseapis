syntax = "proto3";

package dictybase.content;

import "github.com/mwitkow/go-proto-validators/validator.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option cc_enable_arenas = true;
option go_package = "github.com/dictyBase/go-genproto/dictybaseapis/content;content";
option java_multiple_files = true;
option java_outer_classname = "ContentProto";
option java_package = "org.dictybase.content";
option objc_class_prefix = "DICTYAPI";

// The content service definition
service ContentService {
  // Gets the content of specified page(slug)
  rpc GetContentBySlug(ContentRequest) returns (Content) {}
  rpc GetContent(ContentIdRequest) returns (Content) {}
  // Store the content of a new page(slug)
  rpc StoreContent(StoreContentRequest) returns (Content) {}
  // Update the content of an existing page
  rpc UpdateContent(UpdateContentRequest) returns (Content) {}
  // Delete an existing page along with its content
  rpc DeleteContent(ContentIdRequest) returns (google.protobuf.Empty) {}
  // List contents using pagination, ten entries are retrieved by default
  rpc ListContents(ListParameters) returns (ContentCollection) {}
}

message Content {
  ContentData data = 1;
}

message ContentData {
  // The resource name
  string type = 1;
  // Unique id
  int64 id = 2;
  ContentAttributes attributes = 3;
}

// Definition of various content fields
message ContentAttributes {
  // page name
  string name = 1;
  // page slug. Look here https://en.wikipedia.org/wiki/Semantic_URL#Slug to know about slug
  string slug = 2;
  // email id of the user who created the content
  string created_by = 3;
  // email id of the user who updated the content
  string updated_by = 4;
  // Timestamp for creation and update
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  // serialized page content(for example serialized draft js object)
  string content = 7;
  // namespace for the page
  string namespace = 8;
}

message ContentRequest {
  // Url slug
  // Look here https://en.wikipedia.org/wiki/Semantic_URL#Slug to know about slug
  // The slug name should be unique
  string slug = 1;
}

message ContentIdRequest {
  // Unique id to identify content
  int64 id = 1;
}

// Definition for fields that are needed for storing the content
message NewContentAttributes {
  // page name
  string name = 1 [(validator.field) = {regex: "[a-z,A-z,0-9]+"}];
  // email of the user who is creating this content
  string created_by = 2 [(validator.field) = {string_not_empty: true}];
  // page content, expected to be serialized `JSON` string.
  string content = 3 [(validator.field) = {string_not_empty: true}];
  // namespace for the page, it is prepended to the
  // name to generate an unique slug.
  string namespace = 4 [(validator.field) = {string_not_empty: true}];
  // page slug. Look here https://en.wikipedia.org/wiki/Semantic_URL#Slug to know about slug
  string slug = 5 [(validator.field) = {string_not_empty: true}];
}

// Definition for storing new content
message StoreContentRequest {
  message Data {
    // resource name
    string type = 1;
    NewContentAttributes attributes = 2;
  }
  Data data = 1;
}

// Fields that can be updated
// Changing either or both of name and namespace
// attributes alter the slug for the page
message ExistingContentAttributes {
  // email id of the user who is updating this content
  string updated_by = 1 [(validator.field) = {string_not_empty: true}];
  // serialized page content(for example serialized draft js object)
  string content = 2 [(validator.field) = {string_not_empty: true}];
}

message UpdateContentRequest {
  message Data {
    // resource name
    string type = 1;
    // unique id
    int64 id = 2;
    ExistingContentAttributes attributes = 3;
  }
  Data data = 1;
  int64 id = 2;
  // An optional mask specifying which fields to update.
  // Presence of this field allow partial updates.
  google.protobuf.FieldMask update_mask = 3;
}

// ListParameters defines fields for manipulating output of Content collection
message ListParameters {
  // A unique pointer to the next set of result in the list
  int64 cursor = 1;
  // Maximum number of records that can be fetch per request
  int64 limit = 2;
  // The `filter` field restricts the data return by the collection. To use
  // it, supply one or multiple allowed fields to filter followed
  // by a filter expression. It uses the following syntax...
  //        field_name operator expression
  //
  // The following fields of `AnnotationAttributes` definition are allowed to
  // be used for filtering
  //   * name        - page name (string).
  //   * slug        - page slug (string).
  //   * namespace   - page namespace (string).
  //   * created_by  - Email id of the user (string)
  //
  // operator - Defines the type of filter match to use. It could be any of
  // the following four and all of them should be URL-encoded for http request.
  //
  //        Operators for strings
  //              =~    Contains substring
  //              !~   Not contains substring
  //              ===  Equals
  //              !==  Not equals
  //
  // expression - The value that will be included or excluded from the
  // result. URL-reserved characters must be URL-encoded for http request.
  //
  //           filter: "name===annotation"
  //           filter: "slug=~frontpage"
  //           filter: "namespace===dsc"
  //
  // Filter can be combined using OR or AND boolean logic.
  //   * The OR is represented using a comma(,).
  //   * The AND is represented using a semi-colon(;).
  //   * AND and OR operators can be combined and AND takes precedence over OR.
  //
  //           filter: "name~gallery;namespace===stockcenter;slug===intro"
  //
  string filter = 3;
}


// Metadata definition for traversing the collection
message Meta {
  // A unique pointer to the next set of result in the collection. Set the
  // cursor value parameter to the value of next_cursor to retrieve the next
  // set of collection using the same method
  int64 next_cursor = 1;
  // Maximum number of records that can be fetch per request
  int64 limit = 2;
}

// List of paginated contentz
message ContentCollection {
  message Data {
    // unique identifier for the annotation
    string id = 1;
    ContentAttributes attributes = 2;
  }
  repeated Data data = 1;
  Meta meta = 3 [(validator.field) = {msg_exists: true}];
}
